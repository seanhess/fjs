// Generated by CoffeeScript 1.3.1
(function() {
  var fjs, _,
    __slice = [].slice;

  fjs = function(_) {
    var add, arrays, basics, call, compose, curry, debug, div, each, eq, filter, find, first, get, gt, gte, head, last, log, lt, lte, map, max, memoize, min, mult, negate, objects, reduce, rest, reverse, set, sub, tail, take, us;
    curry = function(f) {
      var call;
      return call = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args.length >= f.length) {
          return f.apply(null, args);
        } else {
          return function() {
            var args2, innerArgs;
            args2 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            innerArgs = args.concat(args2);
            return call.apply(null, innerArgs);
          };
        }
      };
    };
    get = curry(function(name, obj) {
      return obj[name];
    });
    set = curry(function(name, value, obj) {
      obj[name] = value;
      return obj;
    });
    call = function() {
      var args, name;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return function() {
        var innerArgs, obj;
        obj = arguments[0], innerArgs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!(obj[name] != null) || !_.isFunction(obj[name])) {
          throw new Error("Object " + obj + " has no method " + name);
        }
        return obj[name].apply(obj, args.concat(innerArgs));
      };
    };
    objects = {
      get: get,
      set: set,
      call: call
    };
    log = function(arg) {
      console.log(arg);
      return arg;
    };
    debug = {
      log: log
    };
    eq = curry(function(a, b) {
      return b === a;
    });
    lt = curry(function(a, b) {
      return b < a;
    });
    lte = curry(function(a, b) {
      return b <= a;
    });
    gt = curry(function(a, b) {
      return b > a;
    });
    gte = curry(function(a, b) {
      return b >= a;
    });
    add = curry(function(a, b) {
      return b + a;
    });
    sub = curry(function(a, b) {
      return b - a;
    });
    mult = curry(function(a, b) {
      return b * a;
    });
    div = curry(function(a, b) {
      return b / a;
    });
    negate = function(a) {
      return !a;
    };
    basics = {
      eq: eq,
      lt: lt,
      lte: lte,
      gt: gt,
      gte: gte,
      add: add,
      sub: sub,
      mult: mult,
      div: div,
      negate: negate
    };
    memoize = _.memoize;
    compose = _.compose;
    find = curry(function(iterator, list) {
      return _.find(list, iterator);
    });
    map = curry(function(iterator, list) {
      return _.map(list, iterator);
    });
    filter = curry(function(iterator, list) {
      return _.filter(list, iterator);
    });
    reduce = curry(function(iterator, list) {
      return _.reduce(list, iterator);
    });
    each = curry(function(iterator, list) {
      return _.each(list, iterator);
    });
    min = curry(function(iterator, list) {
      return _.min(list, iterator);
    });
    max = curry(function(iterator, list) {
      return _.max(list, iterator);
    });
    head = first = _.first;
    last = _.last;
    tail = rest = _.rest;
    us = {
      find: find,
      map: map,
      filter: filter,
      reduce: reduce,
      memoize: memoize,
      compose: compose,
      min: min,
      max: max,
      each: each,
      head: head,
      first: first,
      last: last,
      tail: tail,
      rest: rest
    };
    reverse = function(arr) {
      return arr.concat().reverse();
    };
    take = curry(function(n, arr) {
      return first(arr, n);
    });
    arrays = {
      reverse: reverse,
      take: take
    };
    return _.extend({
      curry: curry
    }, objects, basics, us, arrays, debug);
  };

  if ((typeof define !== "undefined" && define !== null ? define.amd : void 0) != null) {
    define(['underscore'], function(_) {
      return fjs(_);
    });
  } else if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    _ = require('underscore');
    module.exports = fjs(_);
    console.log("HI!");
  }

}).call(this);
